"use strict";
var core_1 = require('@angular/core');
var Ng2TagsInputItem = (function () {
    function Ng2TagsInputItem() {
        this.disabled = false;
        this.tagRemoved = new core_1.EventEmitter();
    }
    Ng2TagsInputItem.prototype.removeTag = function () {
        this.tagRemoved.emit(this.index);
    };
    Ng2TagsInputItem.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'tag-input-item',
                    template: "{{text}}\n  <span\n  *ngIf=\"disabled==false\"\n  class=\"ng2-tag-input-remove\"\n  (click)=\"removeTag()\">&times;</span>",
                    styles: ["\n    :host {\n      display: inline-block;\n      background: #ccc;\n      padding: 7px;\n      border-radius: 90px;\n      margin-right: 10px;\n    }\n    :host.ng2-tag-input-item-selected {\n      color: white;\n      background: #0d8bff;\n    }\n    .ng2-tag-input-remove {\n      cursor: pointer;\n      display: inline-block;\n      padding: 0 3px;\n    }\n  "],
                    host: {
                        '[class.ng2-tag-input-item-selected]': 'selected'
                    }
                },] },
    ];
    /** @nocollapse */
    Ng2TagsInputItem.ctorParameters = function () { return []; };
    Ng2TagsInputItem.propDecorators = {
        'selected': [{ type: core_1.Input },],
        'disabled': [{ type: core_1.Input },],
        'text': [{ type: core_1.Input },],
        'index': [{ type: core_1.Input },],
        'tagRemoved': [{ type: core_1.Output },],
    };
    return Ng2TagsInputItem;
}());
exports.Ng2TagsInputItem = Ng2TagsInputItem;
